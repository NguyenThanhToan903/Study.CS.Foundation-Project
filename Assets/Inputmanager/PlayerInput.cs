//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Inputmanager/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Combat"",
            ""id"": ""a609f096-65ea-4611-b7ed-a23d8bb4f10f"",
            ""actions"": [
                {
                    ""name"": ""Catch"",
                    ""type"": ""Button"",
                    ""id"": ""d5d97972-93c4-4425-82b1-5f4fec171896"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a3a22c4a-3419-4c3d-92dd-674452cbccca"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Catch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Navigate"",
            ""id"": ""2f956220-848c-4f58-abde-d7532c01df3e"",
            ""actions"": [
                {
                    ""name"": ""Esc"",
                    ""type"": ""Button"",
                    ""id"": ""46ce0ef5-dd57-4d3d-81ec-5a803b570f9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""526e70cb-1df1-48c9-a0f7-8db5aa86e46f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Esc"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Combat
        m_Combat = asset.FindActionMap("Combat", throwIfNotFound: true);
        m_Combat_Catch = m_Combat.FindAction("Catch", throwIfNotFound: true);
        // Navigate
        m_Navigate = asset.FindActionMap("Navigate", throwIfNotFound: true);
        m_Navigate_Esc = m_Navigate.FindAction("Esc", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Combat
    private readonly InputActionMap m_Combat;
    private List<ICombatActions> m_CombatActionsCallbackInterfaces = new List<ICombatActions>();
    private readonly InputAction m_Combat_Catch;
    public struct CombatActions
    {
        private @PlayerInput m_Wrapper;
        public CombatActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Catch => m_Wrapper.m_Combat_Catch;
        public InputActionMap Get() { return m_Wrapper.m_Combat; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CombatActions set) { return set.Get(); }
        public void AddCallbacks(ICombatActions instance)
        {
            if (instance == null || m_Wrapper.m_CombatActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CombatActionsCallbackInterfaces.Add(instance);
            @Catch.started += instance.OnCatch;
            @Catch.performed += instance.OnCatch;
            @Catch.canceled += instance.OnCatch;
        }

        private void UnregisterCallbacks(ICombatActions instance)
        {
            @Catch.started -= instance.OnCatch;
            @Catch.performed -= instance.OnCatch;
            @Catch.canceled -= instance.OnCatch;
        }

        public void RemoveCallbacks(ICombatActions instance)
        {
            if (m_Wrapper.m_CombatActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICombatActions instance)
        {
            foreach (var item in m_Wrapper.m_CombatActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CombatActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CombatActions @Combat => new CombatActions(this);

    // Navigate
    private readonly InputActionMap m_Navigate;
    private List<INavigateActions> m_NavigateActionsCallbackInterfaces = new List<INavigateActions>();
    private readonly InputAction m_Navigate_Esc;
    public struct NavigateActions
    {
        private @PlayerInput m_Wrapper;
        public NavigateActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Esc => m_Wrapper.m_Navigate_Esc;
        public InputActionMap Get() { return m_Wrapper.m_Navigate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NavigateActions set) { return set.Get(); }
        public void AddCallbacks(INavigateActions instance)
        {
            if (instance == null || m_Wrapper.m_NavigateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NavigateActionsCallbackInterfaces.Add(instance);
            @Esc.started += instance.OnEsc;
            @Esc.performed += instance.OnEsc;
            @Esc.canceled += instance.OnEsc;
        }

        private void UnregisterCallbacks(INavigateActions instance)
        {
            @Esc.started -= instance.OnEsc;
            @Esc.performed -= instance.OnEsc;
            @Esc.canceled -= instance.OnEsc;
        }

        public void RemoveCallbacks(INavigateActions instance)
        {
            if (m_Wrapper.m_NavigateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INavigateActions instance)
        {
            foreach (var item in m_Wrapper.m_NavigateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NavigateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NavigateActions @Navigate => new NavigateActions(this);
    public interface ICombatActions
    {
        void OnCatch(InputAction.CallbackContext context);
    }
    public interface INavigateActions
    {
        void OnEsc(InputAction.CallbackContext context);
    }
}
